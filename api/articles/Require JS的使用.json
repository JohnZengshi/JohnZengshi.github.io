{"title":"RequireJS的使用","slug":"Require JS的使用","date":"2017-09-20T01:59:08.796Z","updated":"2017-09-11T13:03:19.909Z","comments":true,"excerpt":"","content":"<blockquote>\n<h2 id=\"1-入门\"><a href=\"#1-入门\" class=\"headerlink\" title=\"1.入门\"></a>1.入门</h2></blockquote>\n<ul>\n<li><p>下载requirejs文件</p>\n</li>\n<li><p>在需要使用requireJS的html页面中引入requirejs文件</p>\n</li>\n<li><p>编写js代码–&gt;编写一个模块</p>\n<ul>\n<li><p>在a.js文件中通过来定义一个模块(tip:约定一个js文件就是一个模块)</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([],<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    //模块内部的代码</div><div class=\"line\">    &#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>在b.js文件中从而获取a.js中的代码，这样的话就可以保证在执行b.js中的代码之前先执行了a.js中的代码</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">x require([<span class=\"string\">\"a\"</span>],<span class=\"function\"><span class=\"title\">function</span></span>()&#123;&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"2-依赖注入：模块具有返回值：\"><a href=\"#2-依赖注入：模块具有返回值：\" class=\"headerlink\" title=\"2.依赖注入：模块具有返回值：\"></a>2.依赖注入：模块具有返回值：</h2></blockquote>\n<ul>\n<li><p>1.给定义模块的回调函数添加return语句</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">//a.js文件中</div><div class=\"line\">define(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    //模块的逻辑</div><div class=\"line\">    <span class=\"built_in\">return</span> 10;</div><div class=\"line\">&#125;)</div><div class=\"line\">//b.js文件中</div><div class=\"line\">define(<span class=\"function\"><span class=\"title\">function</span></span>()&#123;</div><div class=\"line\">    <span class=\"built_in\">return</span> &#123;name:<span class=\"string\">\"张三\"</span>&#125;;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>2.在获取模块的时候，通过require()的二个参数来依次获取各个模块的返回值</p>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">require([<span class=\"string\">\"./a.js\"</span>,<span class=\"string\">\"./b.js\"</span>],<span class=\"keyword\">function</span>(a,b)&#123;</div><div class=\"line\">    console.log(a);//10</div><div class=\"line\">    console.log(b.name);//<span class=\"string\">\"张三\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<ul>\n<li><p>依赖注入的使用注意点：以后在实际项目中，可能一个js文件会依赖无数个模块，对于无数个模块有的有返回值，有的没有返回值，在添加模块依赖的时候，应该注意：</p>\n<ul>\n<li>把所有的有返回值的模块在前面添加，把没有返回值的模块在后面添加</li>\n<li><p>举例：如果有a、b、c 3个模块，其中，a模块有返回值，b模块没有返回值，c模块有返回值</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">    define([<span class=\"string\">\"a\"</span>,<span class=\"string\">\"b\"</span>,<span class=\"string\">\"c\"</span>],<span class=\"keyword\">function</span>(a,c)&#123;</div><div class=\"line\">//如果形参编写的时候变成了：a,c</div><div class=\"line\">//  --&gt;a模块可以正常获取，c接受了b模块的返回值，b模块没有返回值，所以c的值为：undefined</div><div class=\"line\">//  --&gt;所以必须要求在形参的位置，写成：a,b,c</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n<li><p>推荐的做法：</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">define([<span class=\"string\">\"a\"</span>,<span class=\"string\">\"c\"</span>,<span class=\"string\">\"b\"</span>],<span class=\"keyword\">function</span>(a,c)&#123;</div><div class=\"line\">    //a接受a模块返回值</div><div class=\"line\">    //c接受c模块返回值</div><div class=\"line\">    //b模块没有返回值，就不用接收</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"3-入口文件\"><a href=\"#3-入口文件\" class=\"headerlink\" title=\"3.入口文件\"></a>3.入口文件</h2></blockquote>\n<ul>\n<li>通过给引入requirejs时的script标签添加data-main属性值，那么requirejs就会自动加载该文件(模块)，可以通过该文件来进行访问其他的模块  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">&lt;script src=<span class=\"string\">\"require.js\"</span> data-main=<span class=\"string\">\"./main\"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"4-如何检测第三方库是否支持AMD规范？\"><a href=\"#4-如何检测第三方库是否支持AMD规范？\" class=\"headerlink\" title=\"4.如何检测第三方库是否支持AMD规范？\"></a>4.如何检测第三方库是否支持AMD规范？</h2></blockquote>\n<ul>\n<li>查看源代码，看看是否有以下内容？如果有，说明支持AMD规范，如果没有说明不支持  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">if</span> (typeof define === <span class=\"string\">\"function\"</span> &amp;&amp; define.amd) &#123;&#125;</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"5-路径-加载模块时遵循的规则\"><a href=\"#5-路径-加载模块时遵循的规则\" class=\"headerlink\" title=\"5.路径(加载模块时遵循的规则)\"></a>5.路径(加载模块时遵循的规则)</h2></blockquote>\n<ul>\n<li><p>如果没有入口文件，加载模块时的路径以引入requirejs时的路径为准(优先级最低)</p>\n</li>\n<li><p>如果有入口文件，加载模块的路径以入口文件所在目录为准(优先级次高)</p>\n</li>\n<li><p>通过配置来自定义路径(优先级最高)</p>\n  <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">    //这里的baseUrl还是相对于html文件</div><div class=\"line\">    baseUrl:<span class=\"string\">\"\"</span></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<h2 id=\"6-配置常用的模块路径-比如：jquery-arttemplate\"><a href=\"#6-配置常用的模块路径-比如：jquery-arttemplate\" class=\"headerlink\" title=\"6.配置常用的模块路径(比如：jquery/arttemplate)\"></a>6.配置常用的模块路径(比如：jquery/arttemplate)</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">require.config(&#123;</div><div class=\"line\">baseUrl:<span class=\"string\">\"./lib\"</span>,</div><div class=\"line\">paths:&#123;</div><div class=\"line\">    //路径不需要.js后缀，最终该文件的路径将会和baseUrl拼接，也就是：<span class=\"string\">\"./lib/js/jquery-2.1.4\"</span></div><div class=\"line\">    jquery:<span class=\"string\">\"js/jquery-2.1.4\"</span></div><div class=\"line\">&#125;</div><div class=\"line\">&#125;)</div><div class=\"line\">//a.js文件中</div><div class=\"line\">define([<span class=\"string\">\"jquery\"</span>],<span class=\"keyword\">function</span>($)&#123;</div><div class=\"line\">    //这里请求的jquery也就是去上面paths中设置的jquery进行查找,也就是：<span class=\"string\">\"./lib/js/jquery-2.1.4\"</span></div><div class=\"line\"></div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n<h2 id=\"7-如果一个js文件不支持AMD这种模块定义规范-比如bootstrap-js-，但是它又依赖于我们定义的模块-jquery-，通过以下方式来解决\"><a href=\"#7-如果一个js文件不支持AMD这种模块定义规范-比如bootstrap-js-，但是它又依赖于我们定义的模块-jquery-，通过以下方式来解决\" class=\"headerlink\" title=\"7.如果一个js文件不支持AMD这种模块定义规范(比如bootstrap.js)，但是它又依赖于我们定义的模块(jquery)，通过以下方式来解决\"></a>7.如果一个js文件不支持AMD这种模块定义规范(比如bootstrap.js)，但是它又依赖于我们定义的模块(jquery)，通过以下方式来解决</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div></pre></td><td class=\"code\"><pre><div class=\"line\">    require.config(&#123;</div><div class=\"line\">    baseUrl:<span class=\"string\">\"./lib\"</span>,</div><div class=\"line\">    paths:&#123;</div><div class=\"line\">        //路径不需要.js后缀，最终该文件的路径将会和baseUrl拼接，也就是：<span class=\"string\">\"./lib/js/jquery-2.1.4\"</span></div><div class=\"line\">        jquery:<span class=\"string\">\"js/jquery-2.1.4\"</span>,</div><div class=\"line\">        bootstrap:<span class=\"string\">\"assets/bootstrap/bootstrap\"</span></div><div class=\"line\">    &#125;,</div><div class=\"line\">    shim:&#123;</div><div class=\"line\">        //这里的bootstrap就是上面的paths中的bootstrap</div><div class=\"line\">        bootstrap:&#123;</div><div class=\"line\">            //这样在请求bootstrap的时候会自动去请求jquery模块</div><div class=\"line\">            deps:[<span class=\"string\">\"jquery\"</span>] //这里的<span class=\"string\">\"jquery\"</span>也是上面paths中的jquery</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;)</div></pre></td></tr></table></figure>\n</blockquote>\n","categories":[{"name":"RequireJS","path":"api/categories/RequireJS.json"}],"tags":[{"name":"开发用到的新技术","path":"api/tags/开发用到的新技术.json"}]}