{"title":"js的加载有两种方法","slug":"javascript加载的俩种方式","date":"2017-09-20T01:59:08.653Z","updated":"2017-09-15T16:24:45.368Z","comments":true,"excerpt":"","content":"<blockquote>\n<h2 id=\"同步加载：\"><a href=\"#同步加载：\" class=\"headerlink\" title=\"同步加载：\"></a>同步加载：</h2></blockquote>\n<figure class=\"highlight html\"><div class=\"mdui-table-fluid\"><table class=\"mdui-table mdui-table-hoverable \"><tr><td class=\"code\"><pre><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://yourdomain.com/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://yourdomain.com/script.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\">//同步模式又称阻塞模式，会阻止浏览器的后续处理，停止后续的解析，只有当当前加载完成，才能进行下一步操作，所以默认同步执行才是安全的。但这样如果js中有输出document内容、修改dom、重定向等行为，就会造成页面堵塞。所以一般建议把<span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"xml\">标签放在<span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span>结尾处，这样尽可能减少页面阻塞。</span></div></pre></td></tr></table></div></figure>\n<blockquote>\n<h2 id=\"异步加载：\"><a href=\"#异步加载：\" class=\"headerlink\" title=\"异步加载：\"></a>异步加载：</h2></blockquote>\n<ul>\n<li><p>异步加载又叫非阻塞加载，浏览器在下载执行js的同时，还会继续进行后续页面的处理。主要有三种方式。</p>\n<ul>\n<li><p>方法一：也叫Script DOM Element</p>\n  <figure class=\"highlight js\"><div class=\"mdui-table-fluid\"><table class=\"mdui-table mdui-table-hoverable \"><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">var</span> scriptEle = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">\"script\"</span>);</div><div class=\"line\">    scriptEle.type = <span class=\"string\">\"text/javasctipt\"</span>;</div><div class=\"line\">    scriptEle.async = <span class=\"literal\">true</span>;</div><div class=\"line\">    scriptEle.src = <span class=\"string\">\"http://cdn.bootcss.com/jquery/3.0.0-beta1/jquery.min.js\"</span>;</div><div class=\"line\">    <span class=\"keyword\">var</span> x = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">\"head\"</span>)[<span class=\"number\">0</span>];</div><div class=\"line\">    x.insertBefore(scriptEle, x.firstChild);\t</div><div class=\"line\">&#125;)</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//&lt;async&gt;属性是HTML5中新增的异步支持。此方法被称为Script DOM Element 方法。Google Analytics 和 Google+ Badge 都使用了这种异步加载代码</span></div><div class=\"line\"></div><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;;</div><div class=\"line\">    <span class=\"keyword\">var</span> ga = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>); </div><div class=\"line\">    ga.type = <span class=\"string\">'text/javascript'</span>; </div><div class=\"line\">    ga.async = <span class=\"literal\">true</span>; </div><div class=\"line\">    ga.src = (<span class=\"string\">'https:'</span> == <span class=\"built_in\">document</span>.location.protocol ? <span class=\"string\">'https://ssl'</span> : <span class=\"string\">'http://www'</span>) + <span class=\"string\">'.google-analytics.com/ga.js'</span>; </div><div class=\"line\">    <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>)[<span class=\"number\">0</span>]; </div><div class=\"line\">    s.parentNode.insertBefore(ga, s); </div><div class=\"line\">&#125;)();</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">//但是这种加载方式执行完之前会阻止onload事件的触发，而现在很多页面的代码都在onload时还执行额外的渲染工作，所以还是会阻塞部分页面的初始化处理。</span></div></pre></td></tr></table></div></figure>\n</li>\n<li><p>方法二：onload时的异步加载</p>\n  <figure class=\"highlight js\"><div class=\"mdui-table-fluid\"><table class=\"mdui-table mdui-table-hoverable \"><tr><td class=\"code\"><pre><div class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">window</span>.attachEvent)&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.attachEvent(<span class=\"string\">\"load\"</span>, asyncLoad);</div><div class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</div><div class=\"line\">        <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">\"load\"</span>, asyncLoad);</div><div class=\"line\">    &#125;</div><div class=\"line\">    <span class=\"keyword\">var</span> asyncLoad = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</div><div class=\"line\">        <span class=\"keyword\">var</span> ga = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">'script'</span>); </div><div class=\"line\">        ga.type = <span class=\"string\">'text/javascript'</span>; </div><div class=\"line\">        ga.async = <span class=\"literal\">true</span>; </div><div class=\"line\">        ga.src = (<span class=\"string\">'https:'</span> == <span class=\"built_in\">document</span>.location.protocol ? <span class=\"string\">'https://ssl'</span> : <span class=\"string\">'http://www'</span>) + <span class=\"string\">'.google-analytics.com/ga.js'</span>; </div><div class=\"line\">        <span class=\"keyword\">var</span> s = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">'script'</span>)[<span class=\"number\">0</span>]; </div><div class=\"line\">        s.parentNode.insertBefore(ga, s);</div><div class=\"line\">    &#125;</div><div class=\"line\">)();</div></pre></td></tr></table></div></figure></li>\n</ul>\n</li>\n</ul>\n","categories":[{"name":"网站搭建","path":"api/categories/网站搭建.json"}],"tags":[{"name":"开发技巧","path":"api/tags/开发技巧.json"}]}